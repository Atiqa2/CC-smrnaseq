/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

//
// General configuration options
//

process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'NFCORE_SMRNASEQ:SMRNASEQ:INPUT_CHECK:SAMPLESHEET_CHECK' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }
}

//
// Genome preparation options
//

process {
    withName: CAT_FASTQ {
        publishDir = [
            path: { "${params.outdir}/fastq" },
            mode: 'copy',
            pattern: '*.fastq',
            // enabled: params.save_merged_fastq //TODO ? implement save_merged_fastq param
        ]
    }
    withName: INDEX_GENOME {
        publishDir = [
            path: { "${params.outdir}/index" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'NFCORE_SMRNASEQ:SMRNASEQ:MIRNA_QUANT:FORMAT_FASTA_MIRNA_.*' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

//
// Read QC and trimming options
//
process {
    withName: MIRTRACE_RUN {
        publishDir = [
            path: { "${params.outdir}/mirtrace" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

if (!(params.skip_fastqc || params.skip_qc)) {
    process {
        withName: '.*:FASTQC_TRIMGALORE:FASTQC' {
            ext.args = '--quiet'
        }
    }
}

if (!params.skip_trimming) {
    process {
        withName: '.*:FASTQC_TRIMGALORE:TRIMGALORE' {
            publishDir = [
                [
                    path: { "${params.outdir}/trimmed/fastqc" },
                    mode: 'copy',
                    pattern: "*.{html,zip}"
                ],
                // [
                //     path: { "${params.outdir}/trimgalore" },
                //     mode: 'copy',
                //     pattern: "*.fq.gz" //,
                //     // enabled: params.save_trimmed //TODO ? Publish them and implement save_trimmed param
                // ],
                [
                    path: { "${params.outdir}/trimmed" },
                    mode: 'copy',
                    pattern: "*.txt"
                ]
            ]
        }
    }
}

//
// Quantification
//

process {
    withName: 'NFCORE_SMRNASEQ:SMRNASEQ:MIRNA_QUANT:BAM_STATS_.*:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.sorted" }
        publishDir = [
            path: { "${params.outdir}/samtools" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'NFCORE_SMRNASEQ:SMRNASEQ:MIRNA_QUANT:BAM_STATS_.*:BAM_STATS_SAMTOOLS:.*' {
        ext.prefix = { "${meta.id}.sorted" }
        publishDir = [
            path: { "${params.outdir}/samtools/samtools_stats" },
            mode: 'copy',
            pattern: "*.{stats,flagstat,idxstats}"
        ]
    }
    withName: 'NFCORE_SMRNASEQ:SMRNASEQ:MIRNA_QUANT:BOWTIE_MAP_.*' {
        publishDir = [
            path: { "${params.outdir}/unmapped/fastq" },
            mode: 'copy',
            pattern: "unmapped/*.gz"
        ]
    }
    withName: 'MIRTOP_QUANT' {
        publishDir = [
            path: { "${params.outdir}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'NFCORE_SMRNASEQ:SMRNASEQ:MIRNA_QUANT:TABLE_MERGE' {
        publishDir = [
            path: { "${params.outdir}/mirtop" },
            mode: 'copy',
            pattern: "*.tsv"
        ]
    }
}

def fasta_from_species = false
def fasta = false
fasta_from_species = params.genome ? params.genomes[ params.genome ].fasta ?: false : false
fasta = params.fasta ?: fasta_from_species
if (fasta) {
    process {
        withName: 'NFCORE_SMRNASEQ:SMRNASEQ:GENOME_QUANT:BAM_SORT_SAMTOOLS:SAMTOOLS_.*' {
            ext.prefix = { "${meta.id}.sorted" }
            publishDir = [
                path: { "${params.outdir}/samtools" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: 'NFCORE_SMRNASEQ:SMRNASEQ:GENOME_QUANT:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.sorted" }
            publishDir = [
                path: { "${params.outdir}/samtools/samtools_stats" },
                mode: 'copy',
                pattern: "*.{stats,flagstat,idxstats}"
            ]
        }
        withName: 'NFCORE_SMRNASEQ:SMRNASEQ:GENOME_QUANT:BOWTIE_MAP_.*' {
            publishDir = [
                path: { "${params.outdir}/unmapped/fastq" },
                mode: 'copy',
                pattern: "unmapped/*.gz"
            ]
        }
    }

    if (!params.skip_mirdeep) {
        process {
            withName: MIRDEEP2_MAPPER {
                publishDir = [
                    path: { "${params.outdir}/mirdeep" },
                    mode: 'copy',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }
}

if (!params.skip_multiqc) {
    process {
        withName: MULTIQC {
            ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
            publishDir = [
                path: { "${params.outdir}/multiqc" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

/*
params {
    modules {
        'fastqc' {
            args = "--quiet" //OK
        }
        'multiqc' {
            args = "" //OK
        }
        'trimgalore' {
            args            = '--fastqc'  // OK
            publish_files   = ['txt':'', 'html':'fastqc', 'zip':'fastqc']
        }
        'cat_fastq' {
            publish_dir     = ['fastq': 'merged']
        }
        // TODO think this was not used, the only instance of samtools view is here and the arg is already provided
        // https://github.com/nf-core/smrnaseq/blob/9ea8cdd2f8e607f2f6b183e7668bd0b7f25e7d39/modules/local/bowtie_map_mirna.nf#L34
        // 'samtools_view' {
        //     args            = '-bS'
        // }
        'map_mirna' { //OK
            publish_files     = ['gz':'fastq']
            publish_dir       = "unmapped"
        }
        'samtools_sort' { //OK
            suffix          = '.sorted'
            publish_files   = [:]
            publish_dir     = "samtools"
        }
        'samtools_index' {
            args            = ''
            suffix          = '.sorted'
            publish_files   = ['stats':'samtools_stats', 'flagstat':'samtools_stats', 'idxstats':'samtools_stats']
            publish_dir     = "samtools"
        }
        'table_merge' {
            publish_files   = ['tsv':'.']
        }
    }
}
*/
